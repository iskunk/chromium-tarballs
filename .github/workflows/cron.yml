name: Chromium Version Tagging

on:
  schedule:
    - cron: '0 */3 * * *'
  workflow_dispatch:

jobs:
  tag_chromium_versions:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # If we use the default github.token we can't trigger workflows when we push new tags
          #token: ${{ secrets.PAT }}
          # If we don't set fetch-depth to 0, we won't be able to fetch tags
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Get Chromium versions
        id: get_versions
        run: |
          curl --fail-with-body --no-progress-meter -o releases.json \
            'https://versionhistory.googleapis.com/v1/chrome/platforms/linux/channels/all/versions/all/releases?filter=channel%3C=dev&order_by=version%20desc'
          jq -r 'limit(10; .releases[].version)' releases.json > versions.txt
          echo "Recent versions:"
          cat versions.txt
          echo "versions=$(tr '\n' ' ' < versions.txt)" >> $GITHUB_OUTPUT

      - name: Configure Git
        if: steps.get_versions.outputs.versions != ''
        run: |
          git config --global user.name "Chromium Bot"
          git config --global user.email "chromium@gentoo.org"

      - name: Tag new versions
        id: tag_versions
        if: steps.get_versions.outputs.versions != ''
        run: |
          for version in ${{ steps.get_versions.outputs.versions }}; do
              if git rev-parse "${version}" >/dev/null 2>&1; then
                  echo "Tag ${version} already exists"
              else
                  _ver=$(jq -r --arg VERSION "${version}" \
                    '.releases[]
                     | select(.version==$VERSION)
                     | "Chromium " + .version + ": "
                       + (.name | sub(".*/channels/(?<ch>\\w+)/.*"; "\(.ch)"))
                       + " "
                       + (.serving.startTime
                          | sub("\\.\\d+"; "")
                          | fromdateiso8601
                          | strftime("(%B %d, %Y at %I:%M UTC)"))
                    ' releases.json)
                  echo "Tagging ${_ver}"
                  git tag -a "${version}" -m "${_ver}"
                  if [[ "${_ver}" == *beta* ]]; then
                      echo beta="${_ver}" >> ${GITHUB_OUTPUT}
                  elif [[ "${_ver}" == *dev* ]]; then
                      echo dev="${_ver}"  >> ${GITHUB_OUTPUT}
                  elif [[ "${_ver}" == *stable* ]]; then
                      echo stable="${_ver}"  >> ${GITHUB_OUTPUT}
                  fi
              fi
          done
          echo "Pushing tags to GitHub"
          echo git push --follow-tags
